// nextflow.config for use in DNA filtration + kinship pipeline

// Define parameters
params {

    // General parameters
    threads = 4
    of_threads = 16
    memory = '15 GB'
    partition = 'standard'
    account = 'berglandlab'
    
    // Directories
    wd = "/project/berglandlab/connor/GeneFamilyEvolution"
    rawgenome = "/project/berglandlab/connor/genomes" // Path to raw genome files for exception species
    sif_dir = "/home/csm6hg/sifs"
    pfamdb_dir = "/home/csm6hg/phd_software/PfamDB"
    out = "/project/berglandlab/connor/GeneFamilyEvolution/output"
    scripts_dir = "/project/berglandlab/connor/GeneFamilyEvolution/bin"
    OF_dir = "/home/csm6hg/phd_software/OrthoFinder_source/tools"
    iqtree_dir = "/home/csm6hg/phd_software"

    // Metadata inputs
    species_list = "/project/berglandlab/connor/GeneFamilyEvolution/ncbi_genomes" // Path to metadata 
    busco_lineage = 'arthropoda_odb10' // BUSCO lineage
    //busco_lineage = 'eukaryota_odb10'
    //outgroup = "caenorhabditis" // Outgroup species for BUSCO trees! 
    outgroup = "artemia"
    busco_data = "/project/berglandlab/connor/busco_downloads" // Path to pre-downloaded BUSCO data; do out of nextflow
    sco_data = "/project/berglandlab/connor/GeneFamilyEvolution/output/sco/sco.txt"
    hog = "/project/berglandlab/connor/GeneFamilyEvolution/output/orthofinder/orthofinder_results/Phylogenetic_Hierarchical_Orthogroups/N0.tsv"

    // BUSCO gene presence/absence parameters
    max_missing_ingroup = 0 // Maximum number of ingroup species that can be missing a BUSCO gene
    max_missing_outgroup = 0 // Maximum number of outgroup species that can be missing a BUSCO gene
}

// Define profiles for slurm execution environment
profiles {
    slurm {
        process {
            executor = 'slurm' // Use SLURM as the executor
            clusterOptions = "--partition=${params.partition} \
            --account=${params.account}" // SLURM partition, account
            cpus = "${params.threads}" // Number of threads per job
            memory = "${params.memory}" // Memory per job
            errorStrategy = 'finish'
            container = 'apptainer' // Specify the container engine
            containerOptions = '--bind /project,/home,/etc/resolv.conf' // Bind necessary directories and network config
        }
        // Ensure the correct environment modules are loaded
        beforeScript = 'module load apptainer/1.3.4'
    }
}

// Define default process settings
process {
    // Set default resource allocations
    cpus = "${params.threads}"
    memory = "${params.memory}"
    errorStrategy = 'finish'
}

// Diagram configuration
dag {
    enabled = true
    file = 'flowchart.png'
    format = 'png'
}

// Report configuration
report {
    enabled = true
    file = 'report.html'
}

// Overwrite existing DAG and report files
dag.overwrite = true
report.overwrite = true